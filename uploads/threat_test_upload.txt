# Threat Detection Test File
# Generated for testing web upload detectors and parsers.
# This file is strictly synthetic and contains harmless, simulated indicators
# (suspicious-looking strings, encoded markers, and obfuscated text as plain text)
# for testing a threat-detection pipeline. DO NOT EXECUTE ANY CONTENT FROM THIS FILE.

===METADATA===
Filename: threat_test_upload.txt
Author: Generated by ChatGPT (synthetic test data)
Purpose: Test threat-detection & parsing systems (IDS/IPS, malware scanners, DLP, steganography detectors)
Date: 2025-10-06

===SECTION: SIMPLE_SUSPICIOUS_STRINGS===
# Samples that detection rules often flag (phishing keywords, suspicious commands)
subject: "Urgent: Verify your account now"
body: "Please click the link below to avoid account suspension."
suspicious_command: "rm -rf / --no-preserve-root"   # included as plain text, DO NOT RUN
suspicious_path_windows: "C:\Users\Public\SecretDump\payload.exe"
suspicious_email: "support@secure-login-update.example.com"
obfuscated_keyword: "p@ssw0rd_reset_required"

===SECTION: SUSPICIOUS_URLS_AND_IPS===
# Fake domains and IPs to test URL/IP indicators and reputation checks
url1: http://secure-login.example-malicious.test/verify
url2: https://xn--secure-pay-xyz.example/confirm
url3: hxxp://195[.]51[.]231[.]5/hidden
ip1: 195.51.231.5
ip2: 203.0.113.45
cidr_block: 203.0.113.0/24

===SECTION: BASE64_PAYLOAD_MARKERS===
# Encoded markers often used for innocuous-but-suspicious storage or C2 test strings
# (harmless content encoded)
plain_text_for_encode: "THIS_IS_A_TEST_PAYLOAD_DO_NOT_EXECUTE"
base64_encoded: "VEhJU19JU19BX1RFU1RfUEFZTElPQURfRE9fTk9UX0VYRUNVVEU="

===SECTION: OBFS_JS_AS_TEXT===
# Obfuscated JS provided as plain text for scanners (non-executable here)
/* START JS TEXT - DO NOT RUN */
var _0x1a2b = ['log','Test','payload'];
(function(a,b){
  while(--b){
    a.push(a.shift());
  }
})(_0x1a2b, 0x0);
console['log']('This is a harmless JS test payload - DO NOT EXECUTE');
/* END JS TEXT */

===SECTION: STEGANOGRAPHY_MARKERS===
# Markers where a steganography detector might look for hidden messages inside other file types.
# For practice, this file contains a textual 'hidden' message encoded between markers.
<stegomarker:start>
VGhpcyBpcyBhIHNpbXVsYXRlZCBo\iddenIG1lc3NhZ2U6IFRlc3QgU3RlZ29OZXRfMTIzIQ==
# (above is a purposely malformed-looking Base64 string to test decoders)
<stegomarker:end>

===SECTION: DATA_EXFIL_PATTERNS===
# Patterns indicative of exfil attempts (e.g., inline IPs, external storage endpoints)
exfil_endpoint: "https://storage.fake-cloud.example/upload?token=ABC123XYZ"
suspicious_headers: "Authorization: Bearer ABCDEFGHIJKLMNOP"
long_unusual_query: "/search?q=SELECT+password+FROM+users+WHERE+id%3D1"

===SECTION: YARA-LIKE_SNIPPETS===
# Simple textual rules-like snippets to test pattern-matching
rule suspicious_word {
  strings:
    $a = "Urgent: Verify"
    $b = "suspend your account"
  condition:
    $a or $b
}

===SECTION: HARMLESS_SHELL_SNIPPET_AS_TEXT===
# Present as text only; DO NOT execute. Useful for detecting command-injection signatures.
#!/bin/bash
# echo "This script is a harmless test string for detection only."
echo "DETECTION_TEST: do not execute"

===SECTION: NOTES_FOR_ANALYST===
# Guidance for whoever reviews detection results
- This file purposefully mixes types of indicators (URLs, IPs, encoded strings, obfuscated text)
  to exercise different detection capabilities: URL reputation checks, yara-like pattern matching,
  base64/encoding decoders, steganography detectors, and DLP keyword filters.
- All content is synthetic and non-executable. The "commands" and filenames are plain text examples.
- For steganography detection, try running detectors on images, audio, or container files containing
  similar markers inside metadata or appended data. This TXT file only contains textual markers.

===END OF FILE===
